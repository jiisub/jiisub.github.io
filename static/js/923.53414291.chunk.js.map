{"version":3,"file":"static/js/923.53414291.chunk.js","mappings":"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","sources":["Component/Modal.tsx"],"sourcesContent":["import { useEffect, useState, Dispatch, SetStateAction } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.module.css';\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faCalendarCheck } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FilteringType } from '../App';\r\n\r\n\r\n// Filtering Modal\r\ntype ModalType = {\r\n  modalOn : boolean,\r\n  setModalOn : Dispatch<SetStateAction<boolean>>,\r\n  setFilteringValue : Dispatch<SetStateAction<FilteringType>>\r\n}\r\n\r\nfunction Modal ({modalOn, setModalOn, setFilteringValue} : ModalType) {\r\n  const [startDate, setStartDate] = useState(new Date());\r\n  const [placeholderValue, setPlaceholderValue] = useState(false);\r\n  const [country, setCountry] = useState([\r\n    {nation : '대한민국', click : false},\r\n    {nation : '중국', click : false},\r\n    {nation : '일본', click : false},\r\n    {nation : '미국', click : false},\r\n    {nation : '북한', click : false},\r\n    {nation : '러시아', click : false},\r\n    {nation : '프랑스', click : false},\r\n    {nation : '영국', click : false}\r\n  ]);\r\n  let [buttonClick, setButtonClick] = useState<HTMLButtonElement>();\r\n\r\n  // Country Button UI\r\n  useEffect(() => {\r\n    let index = Number(buttonClick?.id);\r\n    if(buttonClick instanceof HTMLButtonElement){\r\n      if(country[index].click){\r\n        buttonClick.style.backgroundColor = 'rgb(107, 157, 237)';\r\n        buttonClick.style.color = 'white';\r\n      } else {\r\n        buttonClick.style.backgroundColor = 'white';\r\n        buttonClick.style.color = 'black';\r\n      }\r\n      setButtonClick(undefined);\r\n    }\r\n  }, [buttonClick]);\r\n\r\n  // Modal OFF\r\n  useEffect(() => {\r\n    if(modalOn === false){\r\n      let modalContainer = document.querySelector('.modal-container');\r\n      if(modalContainer instanceof HTMLElement){\r\n        modalContainer.style.opacity = '0';\r\n        modalContainer.style.zIndex = '-10';\r\n      }\r\n    }\r\n  }, [modalOn])\r\n\r\n  return(\r\n    <div className=\"modal-container\">\r\n      <div className=\"filter-container\">\r\n        <ul>\r\n          <li>\r\n            <label htmlFor=\"headline\">헤드라인</label>\r\n            <input type=\"text\" id=\"headline\" name=\"headline\" placeholder=\"검색하실 헤드라인을 입력해주세요.\" />\r\n          </li>\r\n          <li>\r\n            <label htmlFor=\"date\">날짜</label>\r\n            <div className='datepicker-container'>  \r\n              <DatePicker\r\n                dateFormat='yyyy.MM.dd'\r\n                shouldCloseOnSelect\r\n                maxDate={new Date()}\r\n                placeholderText={\"날짜를 선택해주세요.\"}\r\n                selected={placeholderValue ? startDate : null}\r\n                onChange={(date :Date) => {\r\n                  setStartDate(date)\r\n                  setPlaceholderValue(true);\r\n                }}\r\n                className='calendar-input'\r\n              >\r\n              </DatePicker>\r\n              <span className=\"datepicker-icon\">\r\n                <FontAwesomeIcon className='calendar-icon' icon={faCalendarCheck}/>\r\n              </span>\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <div>국가</div>\r\n            <div className=\"country-button-container\">\r\n              {\r\n                country.map((value, i) => {\r\n                  return(\r\n                    <button className='country-button' id={`${i}`} onClick={(e) => {\r\n                      let copy = [...country];\r\n                      copy[i].click = !copy[i].click;\r\n                      setCountry(copy);\r\n                      setButtonClick(e.currentTarget);\r\n                    }} key={i}>{value.nation}</button>\r\n                  )\r\n                })\r\n              }\r\n            </div>\r\n          </li>\r\n          <li>\r\n            <button className=\"filter-button\" onClick={() => {\r\n              const headlineValue = document.querySelector('#headline');\r\n              const dateValue = document.querySelector('.calendar-input');\r\n              if(headlineValue instanceof HTMLInputElement && dateValue instanceof HTMLInputElement){\r\n                let countryValue :string[] = [];\r\n                country.map((value) => {\r\n                  if(value.click){\r\n                    countryValue.push(value.nation);\r\n                  }\r\n                });\r\n                setFilteringValue({\r\n                  headline : headlineValue.value,\r\n                  date : dateValue.value,\r\n                  country : countryValue\r\n                });\r\n                setModalOn(false);\r\n              }\r\n            }}>필터 적용하기</button>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Modal\r\n"],"names":["_ref","modalOn","setModalOn","setFilteringValue","startDate","setStartDate","useState","Date","placeholderValue","setPlaceholderValue","country","setCountry","nation","click","buttonClick","setButtonClick","useEffect","index","Number","id","HTMLButtonElement","style","backgroundColor","color","undefined","modalContainer","document","querySelector","HTMLElement","opacity","zIndex","_jsx","className","children","_jsxs","htmlFor","type","name","placeholder","DatePicker","dateFormat","shouldCloseOnSelect","maxDate","placeholderText","selected","onChange","date","FontAwesomeIcon","icon","faCalendarCheck","map","value","i","concat","onClick","e","copy","currentTarget","headlineValue","dateValue","HTMLInputElement","countryValue","push","headline"],"sourceRoot":""}